package model

import (
	"database/sql"
	"fmt"
	_ "github.com/mattn/go-sqlite3"
)

type (
	CVE struct {
		ID                int64  `json:"ID"`
		NVD_METADATA_YEAR int64  `json:"NVD_METADATA_YEAR"`
		CVE_ID            string `json:"CVE_ID"`
		ASSIGNER          string `json:"ASSIGNER"`
		DESCRIPTION       string `json:"DESCRIPTION"`
		VERSION           string `json:"VERSION"`
		PUBLISHED         string `json:"PUBLISHED"`
		LAST_MODIFIED     string `json:"LAST_MODIFIED"`
	}
	CVEReq struct {
		PageNum  int64 `json:"page_num"`
		PageSize int64 `json:"page_size"`
	}
)

func GetList(req *CVEReq) (list []CVE, total int64, err error) {
	//db, err := sql.Open("sqlite3", "/Users/dp/zhian/zhiannet-edge-line/EdgeAdmin/cve.db")
	db, err := sql.Open("sqlite3", "./cve.db")
	if err != nil {
		return
	}
	defer db.Close()
	rows, err := db.Query("select count(*) FROM NVD_CVE ")
	if err != nil {
		return
	}
	for rows.Next() {
		err = rows.Scan(&total)
		if err != nil {
			return
		}
	}

	rows, err = db.Query(fmt.Sprintf("SELECT ID,NVD_METADATA_YEAR,CVE_ID,ASSIGNER,DESCRIPTION,    VERSION ,    PUBLISHED ,    LAST_MODIFIED FROM NVD_CVE order by id desc limit %v,%v", (req.PageNum-1)*req.PageSize, req.PageSize))
	if err != nil {
		return
	}
	for rows.Next() {
		var id, year int64
		var cve_id, assigner, description, version, published, last_modified string
		err = rows.Scan(&id, &year, &cve_id, &assigner, &description, &version, &published, &last_modified)
		if err != nil {
			return
		}
		list = append(list, CVE{
			ID: id, NVD_METADATA_YEAR: year, CVE_ID: cve_id, ASSIGNER: assigner, DESCRIPTION: description, VERSION: version, PUBLISHED: published, LAST_MODIFIED: last_modified,
		})
	}

	return
}
